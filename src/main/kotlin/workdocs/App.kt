/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package workdocs
import com.amazonaws.services.workdocs.*
import com.amazonaws.services.workdocs.model.*
import com.beust.jcommander.JCommander
import com.beust.jcommander.Parameter
import com.beust.jcommander.ParameterException
import com.beust.jcommander.Parameters
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import org.apache.logging.log4j.kotlin.logger
import java.io.FileInputStream
import java.io.FileOutputStream
import java.io.InputStream
import java.io.OutputStream


abstract class CommonArgs
{
  @Parameter(names =["--folder"],description = "Folder name")
  var folder: String = "359145ea251b5c82f99311daa400da6d959b0ba13d73602c9c2df48ee16062dd"

  @Parameter(names=["--organization","--organization-id"],description = "organization id")
  var orginazation = "d-926722377d"

  @Parameter(names=["--user"], description="User ID")
  var user: String = "S-1-5-21-3846250425-2220392149-3191951183-1109&d-926722377d"

  @Parameter(names=["--profile"])
  lateinit var profile: String


  @Parameter(names=["--region"])
  lateinit var region: String


  @Parameter(names=["--input", "--source"],
      description="Import table from file/url")
  lateinit var source: String

  @Parameter(names=["--output", "--dest"],
      description="Output file/url")
  public var output: String? = null

  fun getSource(): InputStream
      =
    if(!::source.isInitialized || source.isNullOrBlank()) System.`in`
    else if (source.startsWith("file:/")) java.net.URL(source).openStream()
    else FileInputStream(source)

  fun getOutput(): OutputStream =
    if (output.isNullOrBlank()) System.`out`
    else FileOutputStream(output)

  abstract fun run() : Unit

  fun getClient() = AmazonWorkDocsClientBuilder.standard().also {
    if( ::region.isInitialized )
      it.region = region
  }.build()
}

class CommandImport : CommonArgs()
{

  override fun run() {
  }
}
fun pl(any:Any) = println(any.pretty())
class CommandList : CommonArgs()
{

   @Parameter(names=["-l","--long"],description = "List files/folders")
   var long: Boolean = false

  override fun run() {
    val client = getClient()
    val df = client.describeFolderContents(DescribeFolderContentsRequest().withFolderId(folder))
    df.folders.forEach{
      if( long )
        pl( it )
      else
        pl( it.name)
    }
    df.documents.forEach {
    if( long)
      pl(it)
      else
      pl(it.latestVersionMetadata.name)
    }


  }
}
class CommandShared : CommonArgs()
{

  @Parameter(names=["-l","--long"],description = "List long")
  var long: Boolean = false

  override fun run() {
    val client = getClient()
    val df = client.getResources(GetResourcesRequest().withUserId(user).withCollectionType("SHARED_WITH_ME"))
    df.folders.forEach{
      if( long )
        pl( it )
      else
        pl( it.name)
    }
    df.documents.forEach {
      if( long)
        pl(it)
      else
        pl(it.latestVersionMetadata.name)
    }



  }
}
class CommandUsers : CommonArgs()
{

  override fun run() {
    val client = getClient()
    client.describeUsers(DescribeUsersRequest().withOrganizationId(orginazation)).users.forEach {
      pl( it )
    }


  }
}
val objectMapper = jacksonObjectMapper().writerWithDefaultPrettyPrinter()
fun Any.pretty() = objectMapper.writeValueAsString(this)
class CommandInfo : CommonArgs()
{

  override fun run() {
    val client  = getClient()
    val u = client.getCurrentUser(GetCurrentUserRequest())
    println( u.user.pretty() )

  }
}


class CommandMain
{
  @Parameter(names=arrayOf("--help"), description="Help")
  var help: Boolean=false
}
val log = logger("workdocs")
fun main(args: Array<String>) {
  log.info("main")
  val commands=mapOf<String, CommonArgs>(
      "info" to CommandInfo(),
      "ls" to CommandList(),
      "import" to CommandImport(),
      "list" to CommandList(),
      "users" to CommandUsers(),
      "shared" to CommandShared()
  )

  var jb= JCommander.newBuilder().addObject( CommandMain())
  commands.forEach { (name, command) -> jb.addCommand(name, command) }
  var jc=jb.build()


  try
  {
    jc.parse(*args)
      if( jc.parsedCommand.isNullOrEmpty() )
        jc.usage()
      else
        commands[jc.getParsedCommand()]!!.run()
  }
  catch (e: ParameterException)
  {
    System.err.println(e.message)
    e.usage()
  }
  catch (e: Throwable)
  {
    log.error(e)
    e.printStackTrace(System.err)
  }

}


